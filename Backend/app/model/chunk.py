from pydantic import BaseModel, Field
from typing import Optional, Literal, List, Union 
from enum import Enum
from datetime import datetime 


class AnnotationStatus(str, Enum):
    RAW = "RAW"
    UNANNOTATED = "UNANNOTATED"
    PENDING = "PENDING"
    ANNOTATED = "ANNOTATED"
    FAILED_QUOTA = "FAILED_QUOTA"
    FAILED_GEN = "FAILED_GEN"

# Set up MongoDB schema/collections for chunks and metadata.
class ChunkSchema(BaseModel):
    chunkId: str
    source: Literal["code", "documentation", "others"]
    chunk: str
    isEmbedded: bool = False

    # Code-specific fields
    project: Optional[str] = None
    repo: Optional[str] = None
    section: Optional[List[str]] = None
    file: Optional[List[str]] = None
    version: Optional[str] = None

    # Documentation-specific fields
    url: Optional[str] = None
    page_title: Optional[str] = None
    category: Optional[str] = None

    # PDF-specific fields
    filename: Optional[str] = None
    page_numbers: Optional[List[int]] = None

    
    description: Optional[str] = Field(
        None, 
        alias="annotation", 
        description="Human-readable description generated by LLM (Maps to 'annotation' in DB)."
    )
    
    #Fields for the Annotation Service Status and Timestamp
    status: AnnotationStatus = Field(AnnotationStatus.RAW, description="Processing status of the chunk.")
    last_annotated_at: Optional[datetime] = None
    
    pending_since: Optional[datetime] = None
    retry_count: int = 0 
    
    # Configuration to ensure Pydantic can read from the alias
    class Config:
        populate_by_name = True
